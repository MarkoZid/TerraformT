name: "Terraform"

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Set Azure service principal credentials as environment variables
      - name: Set Azure credentials
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          export ARM_CLIENT_ID=$(jq -r .clientId azure_credentials.json)
          export ARM_CLIENT_SECRET=$(jq -r .clientSecret azure_credentials.json)
          export ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure_credentials.json)
          export ARM_TENANT_ID=$(jq -r .tenantId azure_credentials.json)
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> $GITHUB_ENV

      # Install the specific version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.ZIDAR }}
          terraform_version: 1.6.6 # Specify the version of Terraform you want to use

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          export PATH=$PATH:/opt/az/bin
          terraform plan -input=false
      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      # Deploy the .NET Core app to Azure Web App
      - name: Deploy .NET Core app to Azure Web App
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az webapp deployment source config-zip -g Marathon1 -n marathon-api --src ./api99.zip

      # Deploy the Client to Azure Web App
      - name: Deploy Frontend to Azure Web App
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az webapp deployment source config-zip -g Marathon1 -n marathon-client --src ./build1.zip 
